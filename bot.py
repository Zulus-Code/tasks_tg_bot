import gspread
import os
from dotenv import load_dotenv
from urllib.parse import quote, unquote
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID")
GOOGLE_SHEETS_CREDS = os.getenv("GOOGLE_SHEETS_CREDS")
MAIN_SHEET_NAME = "Tasks"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤–µ—Ä–Ω–æ–µ

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
def connect_to_sheets(sheet_name="–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ"):
    try:
        scope = [
            'https://spreadsheets.google.com/feeds',
            'https://www.googleapis.com/auth/drive'
        ]
        creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_SHEETS_CREDS, scope)
        client = gspread.authorize(creds)
        spreadsheet = client.open_by_key(SPREADSHEET_ID)
        
        try:
            return spreadsheet.worksheet(sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = spreadsheet.add_worksheet(title=sheet_name, rows=100, cols=3)
            if sheet_name == "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ":
                worksheet.append_row(["–ó–∞–¥–∞—á–∞", "–î–∞—Ç–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç"])
            return worksheet
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

# –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è callback_data
def encode_task(task: str, max_bytes: int) -> str:
    encoded = quote(task)
    encoded_bytes = encoded.encode('utf-8')[:max_bytes]
    return encoded_bytes.decode('utf-8', 'ignore')

# –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
def decode_task(encoded_task: str) -> str:
    return unquote(encoded_task)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
def get_today_tasks(sheet):
    try:
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        today_index = datetime.today().weekday()
        today_col = days[today_index] if today_index != 6 else "–í—Å"

        data = sheet.get_all_values()
        if not data or len(data[0]) < 1:
            return []

        headers = data[0]
        if today_col not in headers:
            return []

        col_index = headers.index(today_col)
        tasks = []

        for row in data[1:]:
            if len(row) > col_index and row[col_index].strip().upper() == "TRUE":
                tasks.append(row[0].strip())

        return tasks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        return []

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
def create_task_buttons(task):
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è encoded_task –≤ –±–∞–π—Ç–∞—Ö (64 - –¥–ª–∏–Ω–∞ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
    max_bytes = 57  # cancel| –∑–∞–Ω–∏–º–∞–µ—Ç 7 —Å–∏–º–≤–æ–ª–æ–≤ -> 64-7=57
    encoded_task = encode_task(task, max_bytes)
    
    keyboard = [
        [
            InlineKeyboardButton("‚úî –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done|{encoded_task}"),
            InlineKeyboardButton("‚úò –û—Ç–º–µ–Ω–∞", callback_data=f"cancel|{encoded_task}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        sheet = connect_to_sheets(MAIN_SHEET_NAME)
        tasks = get_today_tasks(sheet)
        
        if tasks:
            for task in tasks:
                await update.message.reply_text(
                    text=f"–ó–∞–¥–∞—á–∞: {task}",
                    reply_markup=create_task_buttons(task)
                )
        else:
            await update.message.reply_text("üéâ –û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –°–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        data = query.data
        if "|" not in data:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        action, encoded_task = data.split("|", 1)
        task = decode_task(encoded_task)
        
        if action not in ["done", "cancel"]:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

        emoji_result = "‚úî" if action == "done" else "‚úò"
        
        if log_task_result(task, emoji_result):
            await query.edit_message_text(text=f"{query.message.text}\n–°—Ç–∞—Ç—É—Å: {emoji_result}")
        else:
            await query.edit_message_text(text=f"{query.message.text}\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.edit_message_text(text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
def log_task_result(task_name, result):
    try:
        sheet = connect_to_sheets("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ")
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([task_name, current_time, result])
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.run_polling()

if __name__ == "__main__":
    main()